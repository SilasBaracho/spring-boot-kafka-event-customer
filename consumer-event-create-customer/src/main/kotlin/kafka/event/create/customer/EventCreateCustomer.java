/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.event.create.customer;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class EventCreateCustomer extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4560082616539428766L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"EventCreateCustomer\",\"namespace\":\"kafka.event.create.customer\",\"fields\":[{\"name\":\"idtCustomer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"email\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"otp\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"flgActive\",\"type\":\"boolean\"},{\"name\":\"flgConfirmed\",\"type\":\"boolean\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<EventCreateCustomer> ENCODER =
      new BinaryMessageEncoder<EventCreateCustomer>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<EventCreateCustomer> DECODER =
      new BinaryMessageDecoder<EventCreateCustomer>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<EventCreateCustomer> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<EventCreateCustomer> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<EventCreateCustomer> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<EventCreateCustomer>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this EventCreateCustomer to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a EventCreateCustomer from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a EventCreateCustomer instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static EventCreateCustomer fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String idtCustomer;
  @Deprecated public java.lang.String email;
  @Deprecated public java.lang.String otp;
  @Deprecated public boolean flgActive;
  @Deprecated public boolean flgConfirmed;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public EventCreateCustomer() {}

  /**
   * All-args constructor.
   * @param idtCustomer The new value for idtCustomer
   * @param email The new value for email
   * @param otp The new value for otp
   * @param flgActive The new value for flgActive
   * @param flgConfirmed The new value for flgConfirmed
   */
  public EventCreateCustomer(java.lang.String idtCustomer, java.lang.String email, java.lang.String otp, java.lang.Boolean flgActive, java.lang.Boolean flgConfirmed) {
    this.idtCustomer = idtCustomer;
    this.email = email;
    this.otp = otp;
    this.flgActive = flgActive;
    this.flgConfirmed = flgConfirmed;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return idtCustomer;
    case 1: return email;
    case 2: return otp;
    case 3: return flgActive;
    case 4: return flgConfirmed;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: idtCustomer = value$ != null ? value$.toString() : null; break;
    case 1: email = value$ != null ? value$.toString() : null; break;
    case 2: otp = value$ != null ? value$.toString() : null; break;
    case 3: flgActive = (java.lang.Boolean)value$; break;
    case 4: flgConfirmed = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'idtCustomer' field.
   * @return The value of the 'idtCustomer' field.
   */
  public java.lang.String getIdtCustomer() {
    return idtCustomer;
  }


  /**
   * Sets the value of the 'idtCustomer' field.
   * @param value the value to set.
   */
  public void setIdtCustomer(java.lang.String value) {
    this.idtCustomer = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.String getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.String value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'otp' field.
   * @return The value of the 'otp' field.
   */
  public java.lang.String getOtp() {
    return otp;
  }


  /**
   * Sets the value of the 'otp' field.
   * @param value the value to set.
   */
  public void setOtp(java.lang.String value) {
    this.otp = value;
  }

  /**
   * Gets the value of the 'flgActive' field.
   * @return The value of the 'flgActive' field.
   */
  public boolean getFlgActive() {
    return flgActive;
  }


  /**
   * Sets the value of the 'flgActive' field.
   * @param value the value to set.
   */
  public void setFlgActive(boolean value) {
    this.flgActive = value;
  }

  /**
   * Gets the value of the 'flgConfirmed' field.
   * @return The value of the 'flgConfirmed' field.
   */
  public boolean getFlgConfirmed() {
    return flgConfirmed;
  }


  /**
   * Sets the value of the 'flgConfirmed' field.
   * @param value the value to set.
   */
  public void setFlgConfirmed(boolean value) {
    this.flgConfirmed = value;
  }

  /**
   * Creates a new EventCreateCustomer RecordBuilder.
   * @return A new EventCreateCustomer RecordBuilder
   */
  public static kafka.event.create.customer.EventCreateCustomer.Builder newBuilder() {
    return new kafka.event.create.customer.EventCreateCustomer.Builder();
  }

  /**
   * Creates a new EventCreateCustomer RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new EventCreateCustomer RecordBuilder
   */
  public static kafka.event.create.customer.EventCreateCustomer.Builder newBuilder(kafka.event.create.customer.EventCreateCustomer.Builder other) {
    if (other == null) {
      return new kafka.event.create.customer.EventCreateCustomer.Builder();
    } else {
      return new kafka.event.create.customer.EventCreateCustomer.Builder(other);
    }
  }

  /**
   * Creates a new EventCreateCustomer RecordBuilder by copying an existing EventCreateCustomer instance.
   * @param other The existing instance to copy.
   * @return A new EventCreateCustomer RecordBuilder
   */
  public static kafka.event.create.customer.EventCreateCustomer.Builder newBuilder(kafka.event.create.customer.EventCreateCustomer other) {
    if (other == null) {
      return new kafka.event.create.customer.EventCreateCustomer.Builder();
    } else {
      return new kafka.event.create.customer.EventCreateCustomer.Builder(other);
    }
  }

  /**
   * RecordBuilder for EventCreateCustomer instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<EventCreateCustomer>
    implements org.apache.avro.data.RecordBuilder<EventCreateCustomer> {

    private java.lang.String idtCustomer;
    private java.lang.String email;
    private java.lang.String otp;
    private boolean flgActive;
    private boolean flgConfirmed;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.event.create.customer.EventCreateCustomer.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.idtCustomer)) {
        this.idtCustomer = data().deepCopy(fields()[0].schema(), other.idtCustomer);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.otp)) {
        this.otp = data().deepCopy(fields()[2].schema(), other.otp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.flgActive)) {
        this.flgActive = data().deepCopy(fields()[3].schema(), other.flgActive);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.flgConfirmed)) {
        this.flgConfirmed = data().deepCopy(fields()[4].schema(), other.flgConfirmed);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing EventCreateCustomer instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.event.create.customer.EventCreateCustomer other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.idtCustomer)) {
        this.idtCustomer = data().deepCopy(fields()[0].schema(), other.idtCustomer);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.email)) {
        this.email = data().deepCopy(fields()[1].schema(), other.email);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.otp)) {
        this.otp = data().deepCopy(fields()[2].schema(), other.otp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.flgActive)) {
        this.flgActive = data().deepCopy(fields()[3].schema(), other.flgActive);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.flgConfirmed)) {
        this.flgConfirmed = data().deepCopy(fields()[4].schema(), other.flgConfirmed);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'idtCustomer' field.
      * @return The value.
      */
    public java.lang.String getIdtCustomer() {
      return idtCustomer;
    }


    /**
      * Sets the value of the 'idtCustomer' field.
      * @param value The value of 'idtCustomer'.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder setIdtCustomer(java.lang.String value) {
      validate(fields()[0], value);
      this.idtCustomer = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'idtCustomer' field has been set.
      * @return True if the 'idtCustomer' field has been set, false otherwise.
      */
    public boolean hasIdtCustomer() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'idtCustomer' field.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder clearIdtCustomer() {
      idtCustomer = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.String getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder setEmail(java.lang.String value) {
      validate(fields()[1], value);
      this.email = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder clearEmail() {
      email = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'otp' field.
      * @return The value.
      */
    public java.lang.String getOtp() {
      return otp;
    }


    /**
      * Sets the value of the 'otp' field.
      * @param value The value of 'otp'.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder setOtp(java.lang.String value) {
      validate(fields()[2], value);
      this.otp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'otp' field has been set.
      * @return True if the 'otp' field has been set, false otherwise.
      */
    public boolean hasOtp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'otp' field.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder clearOtp() {
      otp = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'flgActive' field.
      * @return The value.
      */
    public boolean getFlgActive() {
      return flgActive;
    }


    /**
      * Sets the value of the 'flgActive' field.
      * @param value The value of 'flgActive'.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder setFlgActive(boolean value) {
      validate(fields()[3], value);
      this.flgActive = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'flgActive' field has been set.
      * @return True if the 'flgActive' field has been set, false otherwise.
      */
    public boolean hasFlgActive() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'flgActive' field.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder clearFlgActive() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'flgConfirmed' field.
      * @return The value.
      */
    public boolean getFlgConfirmed() {
      return flgConfirmed;
    }


    /**
      * Sets the value of the 'flgConfirmed' field.
      * @param value The value of 'flgConfirmed'.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder setFlgConfirmed(boolean value) {
      validate(fields()[4], value);
      this.flgConfirmed = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'flgConfirmed' field has been set.
      * @return True if the 'flgConfirmed' field has been set, false otherwise.
      */
    public boolean hasFlgConfirmed() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'flgConfirmed' field.
      * @return This builder.
      */
    public kafka.event.create.customer.EventCreateCustomer.Builder clearFlgConfirmed() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public EventCreateCustomer build() {
      try {
        EventCreateCustomer record = new EventCreateCustomer();
        record.idtCustomer = fieldSetFlags()[0] ? this.idtCustomer : (java.lang.String) defaultValue(fields()[0]);
        record.email = fieldSetFlags()[1] ? this.email : (java.lang.String) defaultValue(fields()[1]);
        record.otp = fieldSetFlags()[2] ? this.otp : (java.lang.String) defaultValue(fields()[2]);
        record.flgActive = fieldSetFlags()[3] ? this.flgActive : (java.lang.Boolean) defaultValue(fields()[3]);
        record.flgConfirmed = fieldSetFlags()[4] ? this.flgConfirmed : (java.lang.Boolean) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<EventCreateCustomer>
    WRITER$ = (org.apache.avro.io.DatumWriter<EventCreateCustomer>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<EventCreateCustomer>
    READER$ = (org.apache.avro.io.DatumReader<EventCreateCustomer>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.idtCustomer);

    out.writeString(this.email);

    out.writeString(this.otp);

    out.writeBoolean(this.flgActive);

    out.writeBoolean(this.flgConfirmed);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.idtCustomer = in.readString();

      this.email = in.readString();

      this.otp = in.readString();

      this.flgActive = in.readBoolean();

      this.flgConfirmed = in.readBoolean();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.idtCustomer = in.readString();
          break;

        case 1:
          this.email = in.readString();
          break;

        case 2:
          this.otp = in.readString();
          break;

        case 3:
          this.flgActive = in.readBoolean();
          break;

        case 4:
          this.flgConfirmed = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










